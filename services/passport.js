const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require("mongoose");
const keys = require('../config/keys');

// User is model class
const User = mongoose.model("users");

/**
 * * Serialize the user and get id (token). Use mongo id instead of googleId since we can use multiple auth providers.
 */
passport.serializeUser((user, done) => {
  // user.id is the _id generated by MongoDB, it is the token stored in tht token
  done(null, user.id)
})

/**
 * * Deserialize the id (token) and return user
 */
passport.deserializeUser(async (id, done) => {
  const user = await User.findById(id)
  if (user) return done(null, user) // first argument is error (null), and second is the return (user)
})

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true // tell google strategy that if request runs through proxy just accept it.
    },
    async (accessToken, refreshToken, profile, done) => {

      // Find first record in colleciton with googleId == profile.id
      const existingUser = await User.findOne({ googleId: profile.id })

      if (!existingUser) {
        const user = await new User({ googleId: profile.id }).save()
        done(null, user)
      }

      // First argument is the error object. It's null in this case.
      done(null, existingUser);
      // Take model instance (a record) and save it to mongoDB.

    }
  )
);

